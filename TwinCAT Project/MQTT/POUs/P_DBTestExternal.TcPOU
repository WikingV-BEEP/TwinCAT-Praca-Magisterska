<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="P_DBTestExternal" Id="{fe6c0610-7e6b-4824-81e3-9f2a23f0b87c}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM P_DBTestExternal
VAR
	 State: E_DbLogState;
    bWriting: BOOL; // Set this bool fla to write the data once into the InfluxDB
    
    dbid: UDINT := 1; // Handle to the configured database
    
    QueryOption_TSDB_Insert : T_QueryOptionTimeSeriesDB_Insert; // defines detailed Queryparameter
    fbNoSQLQueryBuilder_TimeSeriesDB : FB_NoSQLQueryBuilder_TimeSeriesDB; // defines database type specific api
    fbNoSqlQueryEvt : FB_NoSQLQueryEvt(sNetID := '', tTimeout := T#15S); // functionblock to execute queries
    
    // databuffer for 1 second with 10 ms time delta
    windTurbineData:  WindTurbineData;
    
    // error handling helper values
    TcResult: Tc3_Database.I_TcMessage;
    bError: BOOL;
    sErrorMessage: STRING(255);

    i: INT;
    rand : DRAND; 
    nrand: LREAL;
	stDbData : STDBData;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
             rand();
             nrand := rand.Num;
            windTurbineData.WindDirection := 240.328 + nrand;
            windTurbineData.WindSpeed := 7.3292 + nrand;
            windTurbineData.Power := 1133.1975 + nrand;
            windTurbineData.WindTurbineID := 'Wind Turbine Verl 13';
      

CASE State OF
    
    E_DbLogState.idle:
        IF bWriting THEN
            bWriting := FALSE;
            State := E_DbLogState.init;
        END_IF
		E_DbLogState.init:
    
        fbNoSQLQueryBuilder_TimeSeriesDB.pQueryOptions := ADR(QueryOption_TSDB_Insert);
        fbNoSQLQueryBuilder_TimeSeriesDB.cbQueryOptions := SIZEOF(QueryOption_TSDB_Insert);    
        stDbData.iBatteryLevel := GVL_ShellyRecentValues.iBatteryLevel;
		stDbData.rHumidity		:= GVL_ShellyRecentValues.rHumidity;
		stDbData.rTemperature	:= GVL_ShellyRecentValues.rTemperature;
		stDbData.sShellyID		:= GVL_MQTT_Conf.sDevice;
        
        QueryOption_TSDB_Insert.sTableName := 'WindMeasurement_4';
        QueryOption_TSDB_Insert.sDataType := 'STDBData';
        QueryOption_TSDB_Insert.pSymbol := ADR(stDbData);
        QueryOption_TSDB_Insert.cbSymbol := SIZEOF(stDbData);
        QueryOption_TSDB_Insert.nDataCount := 1;
        QueryOption_TSDB_Insert.nStartTimestamp := F_GetSystemTime();
        QueryOption_TSDB_Insert.nCycleTime := 10000; // (in 100 ns)
        State := E_DbLogState.writing;
		 E_DbLogState.writing:    
    
        IF fbNoSqlQueryEvt.Execute(dbid, fbNoSQLQueryBuilder_TimeSeriesDB) THEN
            IF fbNoSqlQueryEvt.bError THEN
                TcResult := fbNoSqlQueryEvt.ipTcResult;                
                State := E_DbLogState.error;
            ELSE
                State := E_DbLogState.idle;
            END_IF
        END_IF
  E_DbLogState.error:
        
        IF TcResult.RequestEventText(1033, sErrorMessage, SIZEOF(sErrorMessage)) THEN
            TcResult.Send(F_GetSystemTime());
            State := E_DbLogState.idle;
            bError := TRUE;
        END_IF
        
        
END_CASE]]></ST>
    </Implementation>
    <LineIds Name="P_DBTestExternal">
      <LineId Id="26" Count="14" />
      <LineId Id="5" Count="0" />
      <LineId Id="42" Count="2" />
      <LineId Id="97" Count="3" />
      <LineId Id="45" Count="8" />
      <LineId Id="41" Count="0" />
      <LineId Id="55" Count="18" />
      <LineId Id="54" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>